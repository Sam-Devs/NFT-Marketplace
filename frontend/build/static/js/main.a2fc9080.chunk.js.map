{"version":3,"sources":["components/Loading/loading.gif","components/ConnectMetamask/metamask.svg","components/FormAndPreview/FormAndPreview.jsx","components/DodNFTImage/DodNFTImage.jsx","components/DodNFTDetails/DodNFTDetails.jsx","components/Loading/Loading.jsx","components/AllDodNfts/AllDodNfts.jsx","components/AccountDetails/AccountDetails.jsx","components/ContractNotDeployed/ContractNotDeployed.jsx","components/ConnectMetamask/ConnectToMetamask.jsx","components/Navbar/Navbar.jsx","components/MyDodNFTDetails/MyDodNFTDetails.jsx","components/MyDodNfts/MyDodNfts.jsx","components/Queries/Queries.jsx","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","FormAndPreview","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","setMintBtnTimer","stop","callMintMyNFTFromApp","e","preventDefault","mintMyNFT","state","dodName","dodPrice","imgDoc","src","setImg","setState","target","files","console","log","objectUrl","URL","createObjectURL","revokeObjectURL","_this2","react_default","createElement","className","onSubmit","htmlFor","style","width","alt","required","type","name","id","accept","onChange","value","placeholder","fontSize","letterSpacing","disabled","nameIsUsed","data-dismiss","Component","DodNFTImage","_ref","imgUrl","height","objectFit","padding","border","DodNFTDetails","callChangeTokenPriceFromApp","tokenId","newPrice","changeTokenPrice","newDodNftPrice","key","dodNft","toNumber","tokenName","mintedBy","substr","slice","length","currentOwner","previousOwner","window","web3","utils","fromWei","price","toString","numberOfTransfers","accountAddress","listed","onClick","removeFromSale","addForSale","buyDodNft","Fragment","color","fontWeight","Loading","text","loadingGIF","textAlign","AllDodNfts","DODnfts","totalTokensMinted","_useState","useState","_useState2","slicedToArray","loading","setLoading","useEffect","undefined","metaData","map","components_Loading_Loading","components_DodNFTImage_DodNFTImage","components_DodNFTDetails_DodNFTDetails","AccountDetails","accountBalance","ContractNotDeployed","ConnectToMetamask","connectToMetamask","metamaskIcon","marginLeft","Navbar","react_router_dom","to","data-toggle","data-target","MyDodNFTDetails","_props$dod","dod","MyDodNfts","totalTokensOwnedByAccount","_useState3","_useState4","myDodNfts","setMyDodNfts","my_dods","filter","components_MyDodNFTDetails_MyDodNFTDetails","Queries","tokenIdForOwner","setTokenIdForOwner","tokenOwner","setTokenOwner","_useState5","_useState6","tokenIdForOwnerNotFound","setTokenIdForOwnerNotFound","getTokenOwner","owner","DodNftContract","methods","oneDod","sent","setTimeout","t0","_x","apply","arguments","ipfs","require","ipfsClient","host","port","protocol","headers","authorization","btoa","App","loadWeb3","loadBlockchainData","mintBtn","document","getElementById","lastMintTime","localStorage","getItem","innerHTML","checkIfCanMint","parseInt","countDownTime","interval","setInterval","now","Date","getTime","diff","removeAttribute","removeItem","clearInterval","minutes","Math","floor","seconds","setAttribute","concat","_callee2","_context2","ethereum","Web3","currentProvider","alert","_callee3","accounts","networkId","dodNftCount","i","DodNft","_context3","eth","getAccounts","metamaskConnected","getBalance","net","getId","chainId","Contract","contractAddress","contractDetected","DodCounter","from","toConsumableArray","totalSupply","fetchMyNFTs","_callee4","_context4","enable","location","reload","_ref5","_callee5","created","ipfsImage","nextTokenId","tokenObject","cid","tokenURI","_context5","tokenNameExists","add","path","tokenSymbol","image","JSON","stringify","toWei","createToken","send","on","setItem","toast","success","message","error","_x2","_x3","_x4","_ref6","_callee7","provider","signer","nftSwapSdk","payment_token","approvalTx","approvalTxReceipt","order","signedOrder","_context7","ethers","providers","Web3Provider","getSigner","NftSwapV4","tokenAddress","amount","loadApprovalStatus","contractApproved","approveTokenOrNftByAsset","wait","transactionHash","buildOrder","fees","recipient","signOrder","postOrder","then","_callee6","listingFee","_context6","getListingPrice","createMarketItem","_x5","_x6","_ref8","_callee9","nonce","_context9","getOrders","nftToken","nftTokenId","sellOrBuyNft","orders","cancelOrder","_callee8","_context8","_x7","_ref10","_callee10","newTokenPrice","_context10","_x8","_x9","_ref11","_callee12","foundOrder","fillTx","txReceipt","_context12","fillSignedOrder","_callee11","_context11","createMarketSale","_x10","_x11","DODnftsContract","DODnftsCount","colorIsUsed","colorsUsed","dist","position","reverseOrder","gutter","containerClassName","containerStyle","toastOptions","duration","background","t","_ref13","icon","borderRadius","dismiss","basename","components_Navbar_Navbar","react_router","exact","render","components_AccountDetails_AccountDetails","components_FormAndPreview_FormAndPreview","components_AllDodNfts_AllDodNfts","components_MyDodNfts_MyDodNfts","components_Queries_Queries","components_ContractNotDeployed_ContractNotDeployed","ConnectMetamask_ConnectToMetamask","Boolean","hostname","match","ReactDOM","StrictMode","src_components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2fc9080.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.26ef8bb4.gif\";","module.exports = __webpack_public_path__ + \"static/media/metamask.fbf33967.svg\";","import React, { Component } from \"react\";\n\n// source: https://stackoverflow.com/questions/1484506/random-color-generator\n\n\nclass FormAndPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dodName: \"\",\n      dodPrice: \"\",\n      imgDoc: null,\n      src: \"\"\n    };\n  }\n\n  componentDidMount = async () => {\n    await this.props.setMintBtnTimer();\n  };\n\n  callMintMyNFTFromApp = (e) => {\n    e.preventDefault();\n    this.props.mintMyNFT(\n      this.state.dodName,\n      this.state.dodPrice,\n      this.state.imgDoc,\n      this.state.src\n    );\n  };\n\nsetImg =(e) => {\n      this.setState({\n        imgDoc: e.target.files[0]\n      });\n      console.log('this.state.imgDoc', this.state.imgDoc)\n       const objectUrl = URL.createObjectURL(e.target.files[0])\n        this.setState({\n              src: objectUrl\n            });\n   return () => URL.revokeObjectURL(objectUrl)\n}\n\n  render() {\n    return (\n      <div>\n        <div className=\"card mt-1\">\n          <div className=\"card-body align-items-center d-flex justify-content-center\">\n            <h5>Upload your image and mint to become a  DOD NFT for free </h5>\n          </div>\n        </div>\n        <form onSubmit={this.callMintMyNFTFromApp} className=\"pt-4 mt-1\">\n          <div className=\"row\">\n            <div className=\"col-md-3\">\n              <div className=\"form-group\">\n                {!this.state.src? <label htmlFor=\"Dodname\">Select a picture to upload</label>: ''}\n                {this.state.src? <img src={this.state.src} style={{ width: \"2rem\" }} className=\"w-100 p-2 mt-1 border\" alt=\"\"/>: ''}\n                <input\n                  required\n                  type=\"file\"\n                  name=\"imageUpload\"\n                  id=\"imageUpload\"\n                  accept=\"image/*\"\n                  className=\"form-control\"\n                  onChange={(e) => this.setImg(e)}\n                />\n              </div>\n            </div>\n            <div className=\"col-md-6\">\n              <div className=\"form-group\">\n                <label htmlFor=\"Dodname\">Name</label>\n                <input\n                  required\n                  type=\"text\"\n                  value={this.state.dodName}\n                  className=\"form-control\"\n                  placeholder=\"Enter Your Dod Nft's Name\"\n                  onChange={(e) =>\n                    this.setState({ dodName: e.target.value })\n                  }\n                />\n              </div>\n              <div>\n                <label htmlFor=\"price\">Price (USDC)</label>\n                <input\n                  required\n                  type=\"number\"\n                  name=\"price\"\n                  id=\"dodPrice\"\n                  value={this.state.dodPrice}\n                  className=\"form-control\"\n                  placeholder=\"Enter Price In USDCΞ\"\n                  onChange={(e) =>\n                    this.setState({ dodPrice: e.target.value })\n                  }\n                />\n              </div>\n              <button\n                id=\"mintBtn\"\n                style={{ fontSize: \"0.9rem\", letterSpacing: \"0.14rem\" }}\n                type=\"submit\"\n                className=\"btn mt-4 btn-block btn-outline-primary\"\n                disabled={!this.state.dodPrice || !this.state.dodName || !this.state.src}\n              >\n                Mint My DOD NFT\n              </button>\n              <div className=\"mt-4\">\n                {this.props.nameIsUsed ? (\n                  <div className=\"alert alert-danger alert-dissmissible\">\n                    <button\n                      type=\"button\"\n                      className=\"close\"\n                      data-dismiss=\"alert\"\n                    >\n                      <span>&times;</span>\n                    </button>\n                    <strong>This name is taken!</strong>\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default FormAndPreview;\n","import React from \"react\";\n\nconst DodNFTImage = ({ imgUrl }) => {\n \n\n \n\n  return (\n    <div>\n      <img src={imgUrl} alt=\"\" style={{ width: \"15rem\", height:\"15rem\", objectFit:'cover', padding:'10px', border:'1px solid #ced4da' }} />\n    </div>\n  );\n};\n\nexport default DodNFTImage;\n","import React, { Component } from \"react\";\n\nclass DodNFTDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newDodNftPrice: \"\",\n    };\n  }\n\n  callChangeTokenPriceFromApp = (tokenId, newPrice) => {\n    this.props.changeTokenPrice(tokenId, newPrice);\n  };\n\n  render() {\n    return (\n      <div key={this.props.dodNft.tokenId.toNumber()} className=\"mt-4\">\n        <p>\n          <span className=\"font-weight-bold\">Token Id</span> :{\" \"}\n          {this.props.dodNft.tokenId.toNumber()}\n        </p>\n        <p>\n          <span className=\"font-weight-bold\">Name</span> :{\" \"}\n          {this.props.dodNft.tokenName}\n        </p>\n        <p>\n          <span className=\"font-weight-bold\">Minted By</span> :{\" \"}\n          {this.props.dodNft.mintedBy.substr(0, 5) +\n            \"...\" +\n            this.props.dodNft.mintedBy.slice(\n              this.props.dodNft.mintedBy.length - 5\n            )}\n        </p>\n        <p>\n          <span className=\"font-weight-bold\">Owned By</span> :{\" \"}\n          {this.props.dodNft.currentOwner.substr(0, 5) +\n            \"...\" +\n            this.props.dodNft.currentOwner.slice(\n              this.props.dodNft.currentOwner.length - 5\n            )}\n        </p>\n         <p>\n          <span className=\"font-weight-bold\">Previous Owner</span> :{\" \"}\n          {this.props.dodNft.previousOwner.substr(0, 5) +\n            \"...\" +\n            this.props.dodNft.previousOwner.slice(\n              this.props.dodNft.previousOwner.length - 5\n            )}\n        </p> \n         <p>\n          <span className=\"font-weight-bold\">Price</span> :{\" \"}\n          {window.web3.utils.fromWei(\n            this.props.dodNft.price.toString(),\n            \"Ether\"\n          )}{\" \"}\n          USDC Ξ\n        </p> \n        <p>\n          <span className=\"font-weight-bold\">No. of Transfers</span> :{\" \"}\n          {this.props.dodNft.numberOfTransfers.toNumber()}\n        </p>\n        <div>\n          {this.props.accountAddress === this.props.dodNft.currentOwner && !this.props.dodNft.listed ? (\n            <form\n              onSubmit={(e) => {\n                e.preventDefault();\n                this.callChangeTokenPriceFromApp(\n                  this.props.dodNft.tokenId.toNumber(),\n                  this.state.newDodNftPrice\n                );\n              }}\n            >\n              <div className=\"form-group mt-4 \">\n                <label htmlFor=\"newDodNftPrice\">\n                  <span className=\"font-weight-bold\">Change Token Price</span> :\n                </label>{\" \"}\n                <input\n                  required\n                  type=\"number\"\n                  name=\"newDodNftPrice\"\n                  id=\"newDodNftPrice\"\n                  value={this.state.newDodNftPrice}\n                  className=\"form-control w-50\"\n                  placeholder=\"Enter new price\"\n                  onChange={(e) =>\n                    this.setState({\n                      newDodNftPrice: e.target.value,\n                    })\n                  }\n                />\n              </div>\n              <button\n                type=\"submit\"\n                style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\" }}\n                className=\"btn btn-outline-info mt-0 w-50\"\n              >\n                change price\n              </button>\n            </form>\n          ) : null}\n        </div>\n        <div>\n          {this.props.accountAddress === this.props.dodNft.currentOwner ? (\n            this.props.dodNft.listed ? (\n              <button\n                className=\"btn btn-outline-danger mt-4 w-50\"\n                style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\" }}\n                onClick={() =>\n                  this.props.removeFromSale(\n                    this.props.dodNft.tokenId.toNumber()\n                  )\n                }\n              >\n                Remove from sale\n              </button>\n            ) : (\n              <button\n                className=\"btn btn-outline-success mt-4 w-50\"\n                style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\" }}\n                onClick={() =>\n                  this.props.addForSale(\n                    this.props.dodNft.tokenId.toNumber(),\n                    this.props.dodNft.price\n                  )\n                }\n              >\n                Keep for sale\n              </button>\n            )\n          ) : null}\n        </div>\n        <div>\n          {this.props.accountAddress !== this.props.dodNft.currentOwner ? (\n            this.props.dodNft.listed ? (\n              <button\n                className=\"btn btn-outline-primary mt-3 w-50\"\n                value={this.props.dodNft.price}\n                style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\" }}\n                onClick={(e) =>\n                  this.props.buyDodNft(\n                    this.props.dodNft.tokenId.toNumber(),\n                    e.target.value\n                  )\n                }\n              >\n                Buy For{\" \"}\n                {window.web3.utils.fromWei(\n                  this.props.dodNft.price.toString(),\n                  \"Ether\"\n                )}{\" \"}\n                USDC\n              </button>\n            ) : (\n              <>\n                {/* <button\n                  disabled\n                  style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\", color:'#919aa1', borderColor: \"#919aa1\" }}\n                  className=\"btn btn-outline-primary mt-3 w-50\"\n                >\n                  Buy For{\" \"}\n                  {window.web3.utils.fromWei(\n                    this.props.dodNft.price.toString(),\n                    \"Ether\"\n                  )}{\" \"}\n                  USDC\n                </button> */}\n                <p className=\"mt-2\" style={{color:'blue', fontSize:'16px', fontWeight:'bold'}}>Currently not for sale!</p>\n              </>\n            )\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DodNFTDetails;\n","import React from \"react\";\nimport loadingGIF from \"./loading.gif\";\n\nconst Loading = ({text}) => {\n  return( \n    <>\n  <img src={loadingGIF} alt=\"Loading..\" className=\"d-block m-auto\" />\n  <h4 style={{textAlign:'center'}}> {text || 'Loading ...'} </h4>\n  </>);\n};\n\nexport default Loading;\n","import React, { useState, useEffect } from \"react\";\nimport DodNFTImage from \"../DodNFTImage/DodNFTImage\";\nimport DodNFTDetails from \"../DodNFTDetails/DodNFTDetails\";\nimport Loading from \"../Loading/Loading\";\n\nconst AllDodNfts = ({\n  DODnfts,\n  accountAddress,\n  totalTokensMinted,\n  changeTokenPrice,\n  addForSale,\n  buyDodNft,\n  removeFromSale\n}) => {\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (DODnfts.length !== 0) {\n      if (DODnfts[0].metaData !== undefined) {\n        setLoading(loading);\n      } else {\n        setLoading(false);\n      }\n    }\n  }, [DODnfts]);\n\n  return (\n    <div>\n      <div className=\"card mt-1\">\n        <div className=\"card-body align-items-center d-flex justify-content-center\">\n          <h5>\n            Total No. of Dod Nfts Minted On The Platform :{\" \"}\n            {totalTokensMinted}\n          </h5>\n        </div>\n      </div>\n      <div className=\"d-flex flex-wrap mb-2\">\n        {DODnfts.map((dodNft) => {\n          return (\n            <div key={dodNft.tokenId.toNumber()}  className=\"w-50 p-4 mt-1 border\">\n            {dodNft.tokenId.toNumber() !== 0 ? <div\n             \n            >\n              {!loading ? (\n                <DodNFTImage\n                imgUrl={dodNft.src}\n                />\n              ) : (\n                <Loading />\n              )}\n              <DodNFTDetails\n                dodNft={dodNft}\n                accountAddress={accountAddress}\n                changeTokenPrice={changeTokenPrice}\n                addForSale={addForSale}\n                buyDodNft={buyDodNft}\n                removeFromSale={removeFromSale}\n              />\n            </div>: ''}\n          </div>);\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default AllDodNfts;\n","import React from \"react\";\n\nconst AccountDetails = ({ accountAddress, accountBalance }) => {\n  return (\n    <div>\n      <div className=\"jumbotron\">\n        <h1 className=\"display-5\">DOD NFT Marketplace</h1>\n        <p className=\"lead\">\n          This is an NFT marketplace where you can mint ERC721 implemented{\" \"}\n          <i>DOD NFTs</i> and manage them.\n        </p>\n        <hr className=\"my-4\" />\n        <p className=\"lead\">Account address :</p>\n        <h4>{accountAddress}</h4>\n        <p className=\"lead\">Account balance :</p>\n        <h4>{accountBalance} Ξ</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default AccountDetails;\n","import React from \"react\";\n\nconst ContractNotDeployed = () => {\n  return (\n    <div className=\"jumbotron\">\n      <h3>DOD Nft Contract Not Deployed To This Network.</h3>\n      <hr className=\"my-4\" />\n      <p className=\"lead\">\n        Connect Metamask to Polygon Testnet\n      </p>\n    </div>\n  );\n};\n\nexport default ContractNotDeployed;\n","import React from \"react\";\nimport metamaskIcon from \"./metamask.svg\";\n\nconst ConnectToMetamask = ({ connectToMetamask }) => {\n  return (\n    <div className=\"jumbotron\">\n      <h1 className=\"display-5\">\n        DOD NFT Marketplace\n      </h1>\n      <p className=\"lead\">\n        This is an NFT marketplace where you can mint your ERC721 implemented{\" \"}\n        <i>DOD NFTs</i> and manage them.\n      </p>\n      <hr className=\"my-4\" />\n      <button\n        onClick={connectToMetamask}\n        className=\"btn btn-primary d-flex align-items-center\"\n        style={{ fontSize: \"0.9rem\", letterSpacing: \"0.14rem\" }}\n      >\n        Connect Metamask{\" \"}\n        <img\n          src={metamaskIcon}\n          alt=\"metamask-icon\"\n          style={{ width: \"2rem\", marginLeft: \"0.5rem\" }}\n        />\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectToMetamask;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n      <div className=\"container\">\n        {/* <img src={icon} alt=\"\" /> */}\n        <Link to=\"/\" className=\"navbar-brand ml-2\">\n          DOD NFTs\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNav\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div id=\"navbarNav\" className=\"collapse navbar-collapse\">\n          <ul\n            style={{ fontSize: \"0.8rem\", letterSpacing: \"0.2rem\" }}\n            className=\"navbar-nav ml-auto\"\n          >\n            <li className=\"nav-item\">\n              <Link to=\"/\" className=\"nav-link\">\n                Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/mint\" className=\"nav-link\">\n                Mint NFT\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/marketplace\" className=\"nav-link\">\n                Marketplace\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/my-tokens\" className=\"nav-link\">\n                My Tokens\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/queries\" className=\"nav-link\">\n                Queries\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nconst MyDodNFTDetails = (props) => {\n  const {\n    tokenId,\n    tokenName,\n    price,\n    mintedBy,\n    previousOwner,\n    numberOfTransfers,\n  } = props.dod;\n  return (\n    <div key={tokenId.toNumber()} className=\"mt-4 ml-3\">\n      <p>\n        <span className=\"font-weight-bold\">Token Id</span> :{\" \"}\n        {tokenId.toNumber()}\n      </p>\n      <p>\n        <span className=\"font-weight-bold\">Name</span> : {tokenName}\n      </p>\n      <p>\n        <span className=\"font-weight-bold\">Price</span> :{\" \"}\n        {window.web3.utils.fromWei(price.toString(), \"Ether\")} Ξ\n      </p>\n      <p>\n        <span className=\"font-weight-bold\">No. of Transfers</span> :{\" \"}\n        {numberOfTransfers.toNumber()}\n      </p>\n      {props.accountAddress === mintedBy &&\n      props.accountAddress !== previousOwner ? (\n        <div className=\"alert alert-success w-50 text-center m-auto\">\n          Minted\n        </div>\n      ) : (\n        <div className=\"alert alert-info w-50 text-center m-auto\">Bought</div>\n      )}\n    </div>\n  );\n};\n\nexport default MyDodNFTDetails;\n","import React, { useState, useEffect } from \"react\";\nimport DodNFTImage from \"../DodNFTImage/DodNFTImage\";\nimport MyDodNFTDetails from \"../MyDodNFTDetails/MyDodNFTDetails\";\nimport Loading from \"../Loading/Loading\";\n\nconst MyDodNfts = ({\n  accountAddress,\n  DODnfts,\n  totalTokensOwnedByAccount,\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [myDodNfts, setMyDodNfts] = useState([]);\n\n  useEffect(() => {\n    const my_dods = DODnfts.filter(\n      (dod) => dod.currentOwner === accountAddress\n    );\n    setMyDodNfts(my_dods);\n  }, [DODnfts]);\n\n  return (\n    <div>\n      <div className=\"card mt-1\">\n        <div className=\"card-body align-items-center d-flex justify-content-center\">\n          <h5>\n            Total No. of DODs You Own : {totalTokensOwnedByAccount}\n          </h5>\n        </div>\n      </div>\n      <div className=\"d-flex flex-wrap mb-2\">\n        {myDodNfts.map((dod) => {\n          return (\n            <div\n              key={dod.tokenId.toNumber()}\n              className=\"w-50 p-4 mt-1 border\"\n            >\n              <div className=\"row\">\n                <div className=\"col-md-6\">\n                  {!loading ? (\n                    <DodNFTImage\n                     imgUrl={dod.src}\n                    />\n                  ) : (\n                    <Loading />\n                  )}\n                </div>\n                <div className=\"col-md-6 text-center\">\n                  <MyDodNFTDetails\n                    dod={dod}\n                    accountAddress={accountAddress}\n                  />\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MyDodNfts;\n","import React, { useState } from \"react\";\n\nconst Queries = (props) => {\n  const [tokenIdForOwner, setTokenIdForOwner] = useState(\"\");\n  const [tokenOwner, setTokenOwner] = useState(\"\");\n  const [tokenIdForOwnerNotFound, setTokenIdForOwnerNotFound] = useState(false);\n\n\n  const getTokenOwner = async (e) => {\n    e.preventDefault();\n    try {\n      const owner = await props.DodNftContract.methods\n        .oneDod(tokenIdForOwner)\n        .call();\n        if (owner.currentOwner === '0x0000000000000000000000000000000000000000')setTokenIdForOwnerNotFound(true);\n       else setTokenOwner(owner.currentOwner);\n      setTimeout(() => {\n        setTokenOwner(\"\");\n        setTokenIdForOwner(\"\");\n      }, 5000);\n    } catch (e) {\n      setTokenIdForOwnerNotFound(true);\n      setTokenIdForOwner(\"\");\n    }\n  };\n\n\n  return (\n    <div>\n      <div className=\"card mt-1\">\n        <div className=\"card-body align-items-center d-flex justify-content-center\">\n          <h5>Queries</h5>\n        </div>\n      </div>\n      <div className=\"p-4 border d-grid grid-cols-2 gap-4\">\n        <div className=\"row w-100\">\n          <div className=\"col-md-5\">\n            <h5>Get Token Owner</h5>\n            <form onSubmit={getTokenOwner}>\n              <div className=\"form-group\">\n                <input\n                  required\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={tokenIdForOwner}\n                  placeholder=\"Enter Token Id\"\n                  onChange={(e) => setTokenIdForOwner(e.target.value)}\n                />\n              </div>\n              <button className=\"mt-3 btn btn-outline-primary\" type=\"submit\">\n                Get Owner\n              </button>\n              {tokenIdForOwnerNotFound ? (\n                <div className=\"alert alert-danger alert-dissmissible mt-4\">\n                  <button type=\"button\" className=\"close\" data-dismiss=\"alert\">\n                    <span>&times;</span>\n                  </button>\n                  <strong>Non-Existent Token Id</strong>\n                </div>\n              ) : null}\n            </form>\n            <p className=\"mt-4\">{tokenOwner}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Queries;\n","import React, { Component } from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport toast, { Toaster, ToastBar } from 'react-hot-toast';\nimport \"./App.css\";\nimport Web3 from \"web3\";\nimport { NftSwapV4 } from '@traderxyz/nft-swap-sdk'\nimport {ethers} from 'ethers';\nimport DODnfts from \"../abis/DodNfts.json\";\nimport FormAndPreview from \"../components/FormAndPreview/FormAndPreview\";\nimport AllDodNfts from \"./AllDodNfts/AllDodNfts\";\nimport AccountDetails from \"./AccountDetails/AccountDetails\";\nimport ContractNotDeployed from \"./ContractNotDeployed/ContractNotDeployed\";\nimport ConnectToMetamask from \"./ConnectMetamask/ConnectToMetamask\";\nimport Loading from \"./Loading/Loading\";\nimport Navbar from \"./Navbar/Navbar\";\nimport MyDodNfts from \"./MyDodNfts/MyDodNfts\";\nimport Queries from \"./Queries/Queries\";\n\n\nconst ipfsClient = require(\"ipfs-http-client\");\n\nconst authorization = 'Basic ' + btoa('2EVVxxTErel2Mkp9hLUs0Eziklz'+ ':' + 'ae3354edec14e7d8ea7e82777115534d')\nconst ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n            headers: {\n            authorization\n        }\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accountAddress: \"\",\n      accountBalance: \"\",\n      DODnftsContract: null,\n      DODnftsCount: 0,\n      DODnfts: [],\n      loading: true,\n      metamaskConnected: false,\n      contractDetected: false,\n      totalTokensMinted: 0,\n      totalTokensOwnedByAccount: 0,\n      nameIsUsed: false,\n      colorIsUsed: false,\n      colorsUsed: [],\n      lastMintTime: null,\n      chainId: 80001,\n      contractAddress: '0x4D737c9F72fC9AbA9140Cecb65cd5DD7F43eDA8a',\n      text: ''\n    };\n  }\n\n  componentDidMount = async () => {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n    await this.setMintBtnTimer();\n  };\n\n  setMintBtnTimer = () => {\n    const mintBtn = document.getElementById(\"mintBtn\");\n    if (mintBtn !== undefined && mintBtn !== null) {\n      this.setState({\n        lastMintTime: localStorage.getItem(this.state.accountAddress),\n      });\n      this.state.lastMintTime === undefined || this.state.lastMintTime === null\n        ? (mintBtn.innerHTML = \"Mint My Dod Nft\")\n        : this.checkIfCanMint(parseInt(this.state.lastMintTime));\n    }\n  };\n\n  checkIfCanMint = (lastMintTime) => {\n    const mintBtn = document.getElementById(\"mintBtn\");\n    const timeGap = 300000; //5min in milliseconds\n    const countDownTime = lastMintTime + timeGap;\n    const interval = setInterval(() => {\n      const now = new Date().getTime();\n      const diff = countDownTime - now;\n      if (diff < 0) {\n        mintBtn.removeAttribute(\"disabled\");\n        mintBtn.innerHTML = \"Mint My Dod Nft\";\n        localStorage.removeItem(this.state.accountAddress);\n        clearInterval(interval);\n      } else {\n        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n        mintBtn.setAttribute(\"disabled\", true);\n        mintBtn.innerHTML = `Next mint in ${minutes}m ${seconds}s`;\n      }\n    }, 1000);\n  };\n\n  loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  };\n\n  loadBlockchainData = async () => {\n    const web3 = new Web3(window.web3.currentProvider);\n    const accounts = await web3.eth.getAccounts();\n    if (accounts.length === 0) {\n      this.setState({ metamaskConnected: false });\n    } else {\n      this.setState({ metamaskConnected: true });\n      this.setState({ loading: true });\n      this.setState({ accountAddress: accounts[0] });\n      let accountBalance = await web3.eth.getBalance(accounts[0]);\n      accountBalance = web3.utils.fromWei(accountBalance, \"Ether\");\n      this.setState({ accountBalance });\n      this.setState({ loading: false });\n      const networkId = await web3.eth.net.getId();\n      const networkData = this.state.chainId;\n      if (networkData === networkId) {\n        this.setState({ loading: true });\n        const DodNftContract = new web3.eth.Contract(\n          DODnfts,\n          this.state.contractAddress\n        );\n        this.setState({ DodNftContract });\n        this.setState({ contractDetected: true });\n        let dodNftCount = await DodNftContract.methods.DodCounter().call({from: this.state.accountAddress})\n         dodNftCount = dodNftCount.toNumber()\n        this.setState({ dodNftCount});\n\n        for (var i = 1; i <= dodNftCount; i++) {\n          console.log(i)\n          const DodNft = await DodNftContract.methods.oneDod(i).call({from: this.state.accountAddress})\n          this.setState({\n            DODnfts: [...this.state.DODnfts, DodNft],\n          });\n        }\n\n        let totalTokensMinted = await DodNftContract\n          .methods.totalSupply().call({from: this.state.accountAddress})\n        totalTokensMinted = totalTokensMinted.toNumber();\n        this.setState({ totalTokensMinted });\n        let totalTokensOwnedByAccount = await DodNftContract.methods.fetchMyNFTs().call({from: this.state.accountAddress})\n          const length = totalTokensOwnedByAccount? totalTokensOwnedByAccount.length : 0\n        this.setState({ totalTokensOwnedByAccount: length});\n        this.setState({ loading: false });\n      } else {\n        this.setState({ contractDetected: false });\n      }\n    }\n  };\n\n  connectToMetamask = async () => {\n    await window.ethereum.enable();\n    this.setState({ metamaskConnected: true });\n    window.location.reload();\n  };\n\n\n  mintMyNFT = async ( dodName, dodPrice, imgDoc, src) => {\n    this.setState({ loading: true });\n    const nameIsUsed = await this.state.DodNftContract.methods\n    .tokenNameExists(dodName).call({from: this.state.accountAddress})\n    this.setState({ text: 'Checking NFT name availabilty'})\n    if (nameIsUsed) {\n      this.setState({ nameIsUsed: true });\n      this.setState({ loading: false });\n    } else{\n      this.setState({ text: 'Do not close this window while minting is in progress'})\n       try {\n        const created = await ipfs.add(imgDoc)\n        const ipfsImage = `https://dodnfts.infura-ipfs.io/ipfs/${created.path}`\n      let nextTokenId;\n      nextTokenId = await this.state.DodNftContract.methods.DodCounter().call({from: this.state.accountAddress})\n\n      nextTokenId = nextTokenId.toNumber();\n      const tokenObject = {\n        tokenName: \"DOD NFT\",\n        tokenSymbol: \"DOD\",\n        image: ipfsImage,\n        tokenId: `${nextTokenId}`,\n        name: dodName,\n      };\n      const cid = await ipfs.add(JSON.stringify(tokenObject));\n      let tokenURI = `https://ipfs.infura.io/ipfs/${cid.path}`;\n      const price = window.web3.utils.toWei(dodPrice.toString(), \"Ether\");\n     \n        await this.state.DodNftContract.methods.createToken(tokenURI, price, dodName, ipfsImage)\n        .send({ from: this.state.accountAddress })\n        .on('transactionHash', () => {  \n          localStorage.setItem(this.state.accountAddress, new Date().getTime())\n          this.setState({ loading: false });\n          // window.location.reload()\n          toast.success(<div><h4 style={{ color: 'white', fontWeight:'600'}}>Mint successful</h4> <p>Block confirmation could take a few minutes.</p> <p> Refresh marketplace in a few minutes to view newly minted NFT</p></div>, {\n          });\n       })\n\n      } catch (error) {\n        console.log(error, error.message)\n        this.setState({ loading: false });\n        toast.error(error.message? error.message.slice(0,30) : 'Mint failed');\n      }\n      \n    }\n  };\n\n  addForSale = async (tokenId, price) => {\n    this.setState({ loading: true });\n    this.setState({ text: 'Do not close this window while NFT is being listed'})\n    try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\n        const signer = provider.getSigner(this.state.accountAddress);\n       const nftSwapSdk = new NftSwapV4(provider, signer, this.state.chainId);\n\n         const DodNft = {\n          tokenAddress: this.state.contractAddress, // CryptoPunk contract address\n          tokenId: tokenId, // Token Id of the CryptoPunk we want to swap\n          type: 'ERC721', // Must be one of 'ERC20', 'ERC721', or 'ERC1155'\n        };\n        const payment_token = {\n          tokenAddress: '0xe11a86849d99f524cac3e7a0ec1241828e332c62', // USDC contract address\n          amount: price, // 69 USDC (USDC is 6 digits)\n          type: 'ERC20',\n        };\n\n\n       const approvalStatusForUserA = await nftSwapSdk.loadApprovalStatus(\n            DodNft,\n            this.state.accountAddress\n          );\n          if (!approvalStatusForUserA.contractApproved) {\n            const approvalTx = await nftSwapSdk.approveTokenOrNftByAsset(\n              DodNft,\n              this.state.accountAddress\n            );\n            const approvalTxReceipt = await approvalTx.wait();\n            console.log(\n              `Approved ${DodNft.tokenAddress} contract to swap with 0x v4 (txHash: ${approvalTxReceipt.transactionHash})`\n            );\n          }\n\n        const order = nftSwapSdk.buildOrder(\n          DodNft,\n          payment_token,\n          this.state.accountAddress,\n          {\n            fees: [\n              {\n                amount: 0,\n                recipient: this.state.contractAddress, // your DAO treasury \n              },\n            ],\n          }\n        );\n        const signedOrder = await nftSwapSdk.signOrder(order);\n        await nftSwapSdk.postOrder(signedOrder, this.state.chainId).then( async ()=>{\n              const listingFee = await this.state.DodNftContract.methods\n              .getListingPrice().call({from: this.state.accountAddress})\n            await this.state.DodNftContract.methods\n              .createMarketItem(tokenId, )\n              .send({ from: this.state.accountAddress, to:this.state.contractAddress, value:listingFee })\n              .on('transactionHash', () => {  \n                  this.setState({ loading: false });\n                  // window.location.reload();\n                   toast.success(<div><h4 style={{ color: 'white', fontWeight:'600'}} >NFT listed successfully</h4> <p>Block confirmation could take a few minutes.</p> <p> Refresh marketplace in a few minutes to view newly listed NFT</p></div>, {\n                  })\n                console.log('for sale activated')\n           })\n         })\n      } catch (error) {\n        console.log('error', error)\n        this.setState({ loading: false });\n        toast.error(error.message? error.message.slice(0,30) : ' NFT Listing failed');\n    }\n  };\n\n   removeFromSale = async (tokenId) => {\n    this.setState({ loading: true });\n    this.setState({ text: 'Do not close this window while NFT is being unlisted'})\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n        const signer = provider.getSigner(this.state.accountAddress);\n       const nftSwapSdk = new NftSwapV4(provider, signer, this.state.chainId);\n      const order = await nftSwapSdk.getOrders({\n            nftToken: this.state.contractAddress,\n            nftTokenId: tokenId,\n            sellOrBuyNft: \"sell\", // Only show asks (sells) for this NFT (excludes asks)\n          });\n          console.log(order)\n      const nonce = order.orders[0].order.nonce;\n      await nftSwapSdk.cancelOrder(nonce, 'ERC721').then(async ()=>{\n        await this.state.DodNftContract.methods\n          .removeFromSale(tokenId)\n          .send({ from: this.state.accountAddress})\n          .on('transactionHash', () => {  \n          this.setState({ loading: false });\n          // window.location.reload()\n           toast.success(<div><h4 style={{ color: 'white', fontWeight:'600'}} >DOD NFT unlisted successfully</h4> <p>Block confirmation could take a few minutes.</p> <p> Refresh marketplace in a few minutes to view newly unlisted NFT</p></div>, {\n              })\n       })\n      })\n    } catch (error) {\n      console.log('error', error)\n        this.setState({ loading: false });\n        toast.error(\n          error.message ? error.message.slice(0, 30) : \"NFT unlisting failed\"\n        );\n    }\n  };\n\n  changeTokenPrice = async (tokenId, newPrice) => {\n    try {\n      this.setState({ loading: true });\n      this.setState({ text: 'Do not close this window while NFT price is being changed'})\n      const newTokenPrice = window.web3.utils.toWei(newPrice, \"Ether\");\n      await this.state.DodNftContract.methods\n        .changeTokenPrice(tokenId, newTokenPrice)\n        .send({ from: this.state.accountAddress })\n        .on('transactionHash', () => {  \n          this.setState({ loading: false });\n          // window.location.reload()\n          toast.success(<div><h4 style={{ color: 'white', fontWeight:'600'}} >DOD NFT price change successfully</h4>. <p>Block confirmation could take a few minutes.</p> <p> Refresh marketplace in a few minutes to view newly updated NFT price</p></div>, {\n              })\n       })\n    } catch (error) {\n      console.log('error', error, error.message)\n      this.setState({ loading: false });\n      toast.error(\n        error.message ? error.message.slice(0, 30) : \"NFT price change failed\"\n      );\n    }\n  };\n\n  buyDodNft = async (tokenId, price) => {\n    this.setState({ loading: true });\n    this.setState({ text: 'Do not close this window while NFT is being bought'})\n     try {\n       const provider = new ethers.providers.Web3Provider(window.ethereum)\n        const signer = provider.getSigner(this.state.accountAddress);\n       const nftSwapSdk = new NftSwapV4(provider, signer, this.state.chainId);\n\n      const payment_token = {\n          tokenAddress: '0xe11a86849d99f524cac3e7a0ec1241828e332c62', // USDC contract address\n          amount: price, // 69 USDC (USDC is 6 digits)\n          type: 'ERC20',\n        };\n\n      const approvalStatusForUserB = await nftSwapSdk.loadApprovalStatus(\n        payment_token,\n        this.state.accountAddress\n      );\n\n      // If we do need to approve NFT for swapping, let's do that now\n      if (!approvalStatusForUserB.contractApproved) {\n        const approvalTx = await nftSwapSdk.approveTokenOrNftByAsset(\n          payment_token,\n          this.state.accountAddress\n        );\n        const approvalTxReceipt = await approvalTx.wait();\n        console.log(\n          `Approved ${payment_token.tokenAddress} contract to swap with 0x. TxHash: ${approvalTxReceipt.transactionHash})`\n        );\n      }\n\n      \n       const order = await nftSwapSdk.getOrders({\n            nftToken: this.state.contractAddress,\n            nftTokenId: tokenId,\n            sellOrBuyNft: \"sell\", // Only show asks (sells) for this NFT (excludes asks)\n          });\n        const foundOrder = order.orders[0];\n        console.log(foundOrder)\n        const fillTx = await nftSwapSdk.fillSignedOrder(foundOrder.order).then(async()=>{\n          console.log('yes')\n          await this.state.DodNftContract.methods\n          .createMarketSale(tokenId)\n          .send({ from: this.state.accountAddress })\n          .on('transactionHash', () => {  \n          this.setState({ loading: false });\n           toast.success(<div><h4 style={{ color: 'white', fontWeight:'600'}}>DOD NFT purchase successfully</h4>. <p>Block confirmation could take a few minutes.</p> <p> Refresh marketplace in a few minutes to view newly purchased NFT</p></div>, {\n              })\n       })\n      })\n      const txReceipt = await fillTx.wait();\n      console.log(txReceipt)\n     } catch (error) {\n      console.log(error)\n      this.setState({ loading: false });\n      toast.error(\n        error.message ? error.message.slice(0, 30) : \"NFT purchase failed\"\n      );\n     }\n      \n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n          <Toaster\n          position=\"top-right\"\n          reverseOrder={true}\n          gutter={8}\n          containerClassName=\"\"\n          containerStyle={{}}\n          toastOptions={{\n                success: {\n                  duration: 5000,\n                  style: {\n                    color:'white',\n                    background: 'green',\n                  },\n                },\n                error: {\n                  duration: 5000,\n                  style: {\n                     color:'white',\n                    background: 'red',\n                  },\n                },\n              }}\n          >\n             {(t) => (\n          <ToastBar toast={t}>\n            {({ icon, message }) => (\n              <>\n                {/* {icon} */}\n                {message}\n                {t.type !== 'loading' && (\n                  <button style={{border:'none', background:'transparent', borderRadius:'20px', color:'white'}}onClick={() => toast.dismiss(t.id)}>X</button>\n                )}\n              </>\n            )}\n    </ToastBar>\n        )}\n        </Toaster>;\n        {!this.state.metamaskConnected ? (\n          <ConnectToMetamask connectToMetamask={this.connectToMetamask} />\n        ) : !this.state.contractDetected ? (\n          <ContractNotDeployed />\n        ) : this.state.loading ? (\n          <Loading text={this.state.text}/>\n        ) : (\n          <>\n            <HashRouter basename=\"/\">\n              <Navbar />\n              <Route\n                path=\"/\"\n                exact\n                render={() => (\n                  <AccountDetails\n                    accountAddress={this.state.accountAddress}\n                    accountBalance={this.state.accountBalance}\n                  />\n                )}\n              />\n              <Route\n                path=\"/mint\"\n                render={() => (\n                  <FormAndPreview\n                    mintMyNFT={this.mintMyNFT}\n                    nameIsUsed={this.state.nameIsUsed}\n                    setMintBtnTimer={this.setMintBtnTimer}\n                  />\n                )}\n              />\n              <Route\n                path=\"/marketplace\"\n                render={() => (\n                  <AllDodNfts\n                    accountAddress={this.state.accountAddress}\n                    DODnfts={this.state.DODnfts}\n                    totalTokensMinted={this.state.totalTokensMinted}\n                    changeTokenPrice={this.changeTokenPrice}\n                    addForSale={this.addForSale}\n                    removeFromSale={this.removeFromSale}\n                    buyDodNft={this.buyDodNft}\n                  />\n                )}\n              />\n              <Route\n                path=\"/my-tokens\"\n                render={() => (\n                  <MyDodNfts\n                    accountAddress={this.state.accountAddress}\n                    DODnfts={this.state.DODnfts}\n                    totalTokensOwnedByAccount={\n                      this.state.totalTokensOwnedByAccount\n                    }\n                  />\n                )}\n              />\n              <Route\n                path=\"/queries\"\n                render={() => (\n                  <Queries DodNftContract={this.state.DodNftContract} />\n                )}\n              />\n            </HashRouter>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}